.......Task 1........

#include <iostream>
class Marks {
private:
int mark;
public:
Marks(int m) : mark(m) {}
int getMark() const {
return mark;
}
Marks operator+(const Marks &m) {
int total = this->mark + m.mark;
return Marks(total);
}
};



..........Task 2...........

#include <iostream>
class Circle {
private:
double radius;
public:
Circle(double r) : radius(r) {}
double getRadius() const {
return radius;
}
void setRadius(double r) {
radius = r;
}
double getArea() const {
return M_PI * radius * radius;
}
Circle operator+(const Circle& c) {
double newRadius = this->radius + c.radius;
return Circle(newRadius);
}
};


..............Task 3.........

#include <iostream>
#include <string>
class Color {
private:
std::unordered_map<std::string, std::string> colorCombination = {
{"redblue", "Violet"},
{"bluered", "Violet"},
{"redyellow", "Orange"},
{"yellowred", "Orange"},
{"blueyellow", "Green"},
{"yellowblue", "Green"}
};
string color;
public:
Color(const std::string& c) : color(c) {}
Color operator+(const Color& c) {
string combinedColor = color + c.color;
if (colorCombination.find(combinedColor) != colorCombination.end()) {
return Color(colorCombination[combinedColor]);
}
return Color("Unknown");
}
string getColor() const {
return color;
}
};
Color readColor() {
string input;
cout << "Enter Color: ";
cin >> input;
return Color(input);
}



...........Task 4..........

#include <iostream>
class Triangle {
private:
double base;
double height;
public:
Triangle(double b, double h) : base(b), height(h) {}
double getBase() const {
return base;
}
double getHeight() const {
return height;
}
void setBase(double b) {
base = b;
}
void setHeight(double h) {
height = h;
}
double calcArea() const {
return 0.5 * base * height;
}
Triangle operator-(const Triangle& t) {
double newBase = (base > t.base) ? base - t.base : t.base - base;
double newHeight = (height > t.height) ? height - t.height : t.height - height;
return Triangle(newBase, newHeight);
}
};



...........Task 5.........

#include <iostream>
#include <string>
class Coordinates {
private:
int x;
int y;
public:
Coordinates(int x_val, int y_val) : x(x_val), y(y_val) {}
int getX() const {
return x;
}
int getY() const {
return y;
}
int new_x = this->x - c.x;
int new_y = this->y - c.y;
return Coordinates(new_x, new_y);
}
Coordinates operator*(const Coordinates& c) {
int new_x = this->x * c.x;
int new_y = this->y * c.y;
return Coordinates(new_x, new_y);
}
string checkEqual(const Coordinates& c) {
return (this->x == c.x && this->y == c.y) ? "Points are equal" : "Points are not equal";
}
};
